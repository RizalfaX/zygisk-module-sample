import org.apache.tools.ant.filters.FixCrLfFilter
import java.nio.file.Paths
import java.nio.file.Files

plugins {
    id 'com.android.library'
}

apply from: file(rootProject.file('module.gradle'))

android {
    compileSdkVersion rootProject.ext.targetSdkVersion
    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        externalNativeBuild {
            cmake {
                arguments "-DMODULE_NAME:STRING=$moduleLibraryName", "-DCMAKE_EXPORT_COMPILE_COMMANDS:STRING=ON"
            }
        }
    }
    buildFeatures {
        prefab true
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.18.1"
        }
    }
}

repositories {
    mavenLocal()
}

// Constants
def MAGISK_DIR_TEMPLATE = 'magisk_module_'
def ZIP_FILE_TEMPLATE = '%s-%s-%s.zip'
def ADB_PUSH_CMD = 'push'
def ADB_SHELL_CMD = 'shell'
def MAGISK_INSTALL_CMD = 'magisk --install-module'
def REBOOT_CMD = 'reboot'

// ...

afterEvaluate {
android.libraryVariants.forEach { variant ->
def variantCapped = variant.name.capitalize()
def variantLowered = variant.name.toLowerCase()
def magiskDir = file("$outDir/${MAGISK_DIR_TEMPLATE}${variantLowered}")

// Extracted function: prepareMagiskFiles
def prepareMagiskFilesTask = task("prepareMagiskFiles${variantCapped}", type: Sync) {
dependsOn("assemble$variantCapped")
prepareMagiskFiles(magiskDir, variantLowered)
}

// Extracted function: createZipTask
def zipTask = task("zip${variantCapped}", type: Zip) {
dependsOn prepareMagiskFilesTask
createZipTask(magiskDir, variantLowered)
}

// Extracted function: createPushTask
def pushTask = task("push${variantCapped}", type: Exec) {
dependsOn zipTask
createPushTask(zipTask.archiveFileName)
}

// Extracted function: createFlashTask
def flashTask = task("flash${variantCapped}", type: Exec) {
dependsOn pushTask
createFlashTask(zipTask.archiveFileName)
}

// Extracted function: createFlashAndRebootTask
def flashAndRebootTask = task("flashAndReboot${variantCapped}", type: Exec) {
dependsOn flashTask
createFlashAndRebootTask()
}

variant.assembleProvider.get().finalizedBy(zipTask)
}
}

// Extracted functions
def prepareMagiskFiles(magiskDir, variantLowered) {
def templatePath = "$rootDir/template/magisk_module"
into magiskDir
from(templatePath) {
exclude 'module.prop'
}
from(templatePath) {
include 'module.prop'
expand([
id : magiskModuleId,
name : moduleName,
version : moduleVersion,
versionCode: moduleVersionCode.toString(),
author : moduleAuthor,
description: moduleDescription,
])
filter(FixCrLfFilter.class,
eol: FixCrLfFilter.CrLf.newInstance("lf"))
}
from("$buildDir/intermediates/stripped_native_libs/$variantLowered/out/lib") {
into 'lib'
}
doLast {
file("$magiskDir/zygisk").mkdir()
fileTree("$magiskDir/lib").visit { f ->
if (!f.directory) return
def srcPath = Paths.get("${f.file.absolutePath}/lib${moduleLibraryName}.so")
def dstPath = Paths.get("$magiskDir/zygisk/${f.path}.so")
Files.move(srcPath, dstPath)
}
new File("$magiskDir/lib").deleteDir()
}
}

def createZipTask(magiskDir, variantLowered) {
from magiskDir
archiveFileName.set(String.format(ZIP_FILE_TEMPLATE, magiskModuleId, moduleVersion, variantLowered))
destinationDirectory.set(outDir)
}

def createPushTask(zipFileName) {
workingDir outDir
commandLine android.adbExecutable, ADB_PUSH_CMD, zipFileName, "/data/local/tmp/"
}

def createFlashTask(zipFileName) {
commandLine android.adbExecutable, ADB_SHELL_CMD, "su", "-c", "${MAGISK_INSTALL_CMD} /data/local/tmp/${zipFileName}"
}

def createFlashAndRebootTask() {
commandLine android.adbExecutable, ADB_SHELL_CMD, REBOOT_CMD
}
